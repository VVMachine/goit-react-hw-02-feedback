{"version":3,"sources":["components/Statistics/Statistics.jsx","components/FeedbackOptions/OptionButton/OptionButton.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","App.js","index.js"],"names":["Statistics","props","good","neutral","bad","total","positivePercentage","className","OptionButton","option","onLeaveFeedback","type","name","onClick","FeedbackOptions","options","map","idx","key","Section","title","children","Notification","message","defaultProps","App","state","e","actionType","target","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Object","keys","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAGe,SAASA,EAAWC,GAAQ,IACjCC,EAAkDD,EAAlDC,KAAMC,EAA4CF,EAA5CE,QAASC,EAAmCH,EAAnCG,IAAKC,EAA8BJ,EAA9BI,MAAOC,EAAuBL,EAAvBK,mBAEnC,OACE,yBAAKC,UAAU,YACb,4CACA,uBAAGA,UAAU,QAAb,SAA2BL,GAC3B,uBAAGK,UAAU,WAAb,YAAiCJ,GACjC,uBAAGI,UAAU,OAAb,QAAyBH,GACzB,uBAAGG,UAAU,SAAb,UAA6BF,GAC7B,uBAAGE,UAAU,YAAb,sBAA4CD,EAA5C,MCVS,SAASE,EAAT,GAAoD,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,gBAC7C,OACE,4BAAQC,KAAMF,EAAQG,KAAMH,EAAQI,QAASH,GAC1CD,GCDQ,SAASK,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASL,EAAmB,EAAnBA,gBACjD,OACE,yBAAKH,UAAU,mBACZQ,EAAQC,KAAI,SAACP,EAAQQ,GACpB,OACE,kBAACT,EAAD,CACEC,OAAQA,EACRC,gBAAiBA,EACjBQ,IAAKD,QCVF,SAASE,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,oCACE,4BAAKD,GACJC,GCJQ,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,8BAAOA,GJchBvB,EAAWwB,aAAe,CACxBtB,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAO,EACPC,mBAAoB,GCZtBE,EAAagB,aAAe,CAC1Bf,OAAQ,sBACRC,gBAAiB,cCQnBI,EAAgBU,aAAe,CAC7BT,QAAS,GACTL,gBAAiB,cCXnBS,EAAQK,aAAe,CACrBJ,MAAO,GACPC,SAAU,MCPZC,EAAaE,aAAe,CAC1BD,QAAS,mB,ICuDIE,E,4MAvDbC,MAAQ,CACNxB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPM,gBAAkB,SAACiB,GACjB,IAAMC,EAAaD,EAAEE,OAAOjB,KAE5B,EAAKkB,UAAS,SAACC,GACb,OAAO,eAAGH,EAAaG,EAAUH,GAAc,O,EAInDI,mBAAqB,WAAO,IAAD,EACM,EAAKN,MACpC,OAFyB,EACjBxB,KADiB,EACXC,QADW,EACFC,K,EAIzB6B,gCAAkC,WAAO,IAC/B/B,EAAS,EAAKwB,MAAdxB,KAER,OAAkC,IAA9B,EAAK8B,qBACA,EAGFE,KAAKC,MAAOjC,EAAO,EAAK8B,qBAAwB,M,uDAG/C,IAAD,EACwBI,KAAKV,MAA5BxB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IAEvB,OACE,kBAACe,EAAD,CAASC,MAAO,yBACd,kBAACN,EAAD,CACEC,QAASsB,OAAOC,KAAKF,KAAKV,OAC1BhB,gBAAiB0B,KAAK1B,kBAGO,IAA9B0B,KAAKJ,qBACJ,kBAACV,EAAD,CAAcC,QAAS,sBAEvB,kBAACvB,EAAD,CACEE,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO+B,KAAKJ,qBACZ1B,mBAAoB8B,KAAKH,yC,GAhDnBM,aCFlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.8404b377.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Statistics(props) {\r\n  const { good, neutral, bad, total, positivePercentage } = props;\r\n\r\n  return (\r\n    <div className=\"feedback\">\r\n      <span>Statistics</span>\r\n      <p className=\"good\">Good: {good}</p>\r\n      <p className=\"neutral\">Neutral: {neutral}</p>\r\n      <p className=\"bad\">Bad: {bad}</p>\r\n      <p className=\"total\">Total: {total}</p>\r\n      <p className=\"positive\">Positive feedback: {positivePercentage}%</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nStatistics.defaultProps = {\r\n  good: 0,\r\n  neutral: 0,\r\n  bad: 0,\r\n  total: 0,\r\n  positivePercentage: 0,\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function OptionButton({ option, onLeaveFeedback }) {\r\n  return (\r\n    <button type={option} name={option} onClick={onLeaveFeedback}>\r\n      {option}\r\n    </button>\r\n  );\r\n}\r\n\r\nOptionButton.defaultProps = {\r\n  option: \"Default Option Name\",\r\n  onLeaveFeedback: () => {\r\n    return;\r\n  },\r\n};\r\n\r\nOptionButton.propTypes = {\r\n  option: PropTypes.string.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport OptionButton from \"./OptionButton/OptionButton\";\r\n\r\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\r\n  return (\r\n    <div className=\"feedbackOptions\">\r\n      {options.map((option, idx) => {\r\n        return (\r\n          <OptionButton\r\n            option={option}\r\n            onLeaveFeedback={onLeaveFeedback}\r\n            key={idx}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nFeedbackOptions.defaultProps = {\r\n  options: [],\r\n  onLeaveFeedback: () => {\r\n    return;\r\n  },\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <>\r\n      <h3>{title}</h3>\r\n      {children}\r\n    </>\r\n  );\r\n}\r\n\r\nSection.defaultProps = {\r\n  title: \"\",\r\n  children: null,\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.array,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Notification({ message }) {\r\n  return <span>{message}</span>;\r\n}\r\n\r\nNotification.defaultProps = {\r\n  message: \"Default Message\",\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n","import React, { Component } from \"react\";\n\nimport Statistics from \"./components/Statistics/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Section from \"./components/Section/Section\";\nimport Notification from \"./components/Notification/Notification\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onLeaveFeedback = (e) => {\n    const actionType = e.target.name;\n\n    this.setState((prevState) => {\n      return { [actionType]: prevState[actionType] + 1 };\n    });\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n\n    if (this.countTotalFeedback() === 0) {\n      return 0;\n    }\n\n    return Math.round((good / this.countTotalFeedback()) * 100);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    return (\n      <Section title={\"Please leave feedback\"}>\n        <FeedbackOptions\n          options={Object.keys(this.state)}\n          onLeaveFeedback={this.onLeaveFeedback}\n        />\n\n        {this.countTotalFeedback() === 0 ? (\n          <Notification message={\"No feedback given\"} />\n        ) : (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={this.countTotalFeedback()}\n            positivePercentage={this.countPositiveFeedbackPercentage()}\n          />\n        )}\n      </Section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}